name: Manual Release Deployment

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
jobs:
  create-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install semver
      run: pip install semver
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Calculate new version
      id: versioning
      run: |
        $LATEST_TAG = (git tag --sort=-v:refname | Select-Object -First 1)
        if (-not $LATEST_TAG) { $LATEST_TAG = "$(Get-Date -Format 'yyyy').0.0" }
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        VERSION=$(python -c "
        import semver
        import datetime
        input_type = '${{ github.event.inputs.release_type }}'
        latest = '${LATEST_TAG}'
        try:
            v = semver.VersionInfo.parse(latest)
        except:
            v = semver.VersionInfo( datetime.datetime.now().year, 0, 0 )
        current_year = datetime.datetime.now().year
        if input_type == 'major':
            new_major = max(current_year, v.major + 1)
            new_version = semver.VersionInfo(new_major, 0, 0)
        elif input_type == 'minor':
            new_version = semver.VersionInfo(v.major, v.minor + 1, 0)
        else:
            new_version = semver.VersionInfo(v.major, v.minor, v.patch + 1)
        print(new_version)
        ")
        echo "new_version=$VERSION" >> $GITHUB_OUTPUT
    - name: Create and push new tag
      run: |
        NEW_TAG=${{ steps.versioning.outputs.new_version }}
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f "$NEW_TAG"
        git push origin --force "refs/tags/$NEW_TAG"
    - name: Build .NET app (Windows)
      run: |
        $NEW_TAG = "${{ steps.versioning.outputs.new_version }}"
        dotnet publish Relayway.csproj --framework net9.0 --runtime win-x64 -c Release -o "Release-$NEW_TAG" -p:PublishSingleFile=true --self-contained false
    - name: Copy config files
      run: |
        $NEW_TAG = "${{ steps.versioning.outputs.new_version }}"
        if (Test-Path "appsettings.json") { Copy-Item "appsettings.json" "Release-$NEW_TAG/appsettings.json" }
        if (Test-Path "Relayway.xml") { Copy-Item "Relayway.xml" "Release-$NEW_TAG/Relayway.xml" }
    - name: Create version file
      run: |
        $NEW_TAG = "${{ steps.versioning.outputs.new_version }}"
        Set-Content -Path "Release-$NEW_TAG/version.txt" -Value $NEW_TAG
    - name: Zip Release folder
      run: |
        $NEW_TAG = "${{ steps.versioning.outputs.new_version }}"
        Compress-Archive -Path "Release-$NEW_TAG/*" -DestinationPath "${NEW_TAG}-Release.zip"
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.versioning.outputs.new_version }}
        files: |
          ${{ steps.versioning.outputs.new_version }}-Release.zip
        generate_release_notes: true
    - name: Deploy to target environment
      run: |
        NEW_TAG=${{ steps.versioning.outputs.new_version }}
        echo "Deploying version $NEW_TAG"
        unzip -o "${NEW_TAG}-Release.zip"