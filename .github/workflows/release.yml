name: Manual Release Deployment

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install semver
      run: pip install semver

    - name: Calculate new version
      id: versioning
      run: |
        LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "$(date +%Y).0.0")
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        VERSION=$(python -c "
        import semver
        import datetime
        input_type = '${{ github.event.inputs.release_type }}'
        latest = '${LATEST_TAG}'
        try:
            v = semver.VersionInfo.parse(latest)
        except:
            v = semver.VersionInfo( datetime.datetime.now().year, 0, 0 )
        current_year = datetime.datetime.now().year
        if input_type == 'major':
            new_major = max(current_year, v.major + 1)
            new_version = semver.VersionInfo(new_major, 0, 0)
        elif input_type == 'minor':
            new_version = semver.VersionInfo(v.major, v.minor + 1, 0)
        else:
            new_version = semver.VersionInfo(v.major, v.minor, v.patch + 1)
        print(new_version)
        ")
        echo "new_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create and push new tag
      run: |
        NEW_TAG=${{ steps.versioning.outputs.new_version }}
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f "$NEW_TAG"
        git push origin --force "refs/tags/$NEW_TAG"

  build-releases:
    needs: create-tag
    name: Build Release
    strategy:
      matrix:
        kind: ['linux', 'windows', 'macOS']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
          - kind: macOS
            os: macos-latest
            target: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build
        shell: bash
        run: |
          release_name="Relayway-${{ needs.create-tag.outputs.new_version }}-${{ matrix.target }}"

          # Build everything
          dotnet publish Relayway.csproj --framework net9.0 --runtime "${{ matrix.target }}" -c Release -o "$release_name" -p:PublishSingleFile=true --self-contained false 
          
          # Add version file
          echo "${{ needs.create-tag.outputs.new_version }}" > "$release_name/version.txt"

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            # Add Windows-specific files if they exist
            [ -f "Relayway.xml" ] && cp "Relayway.xml" "$release_name/"
            # Pack to zip for Windows
            7z a -tzip "${release_name}.zip" "./${release_name}/*"
          else
            tar czvf "${release_name}.tar.gz" "$release_name"
          fi

          # Delete output directory
          rm -r "$release_name"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.new_version }}
          files: "Relayway-*"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}